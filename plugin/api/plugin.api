public final class com/redissi/swig/plugin/SwigPlugin : org/gradle/api/Plugin {
	public fun <init> ()V
	public synthetic fun apply (Ljava/lang/Object;)V
	public fun apply (Lorg/gradle/api/Project;)V
}

public abstract class com/redissi/swig/plugin/extension/JavaWrapper {
	public fun <init> (Ljava/lang/String;)V
	public final fun dependsOn ([Lorg/gradle/api/Project;)V
	public final fun dependsOn ([Lorg/gradle/api/artifacts/ProjectDependency;)V
	public final fun extraArguments ([Ljava/lang/String;)V
	public abstract fun getCppProcessing ()Lorg/gradle/api/provider/Property;
	public abstract fun getInterfaceFile ()Lorg/gradle/api/file/RegularFileProperty;
	public final fun getName ()Ljava/lang/String;
	public abstract fun getPackageName ()Lorg/gradle/api/provider/Property;
	public abstract fun getSourceFolders ()Lorg/gradle/api/provider/ListProperty;
}

public abstract class com/redissi/swig/plugin/task/GenerateSwigWrapperTask : org/gradle/api/tasks/SourceTask {
	public fun <init> ()V
	public fun generate ()V
	public abstract fun getCppProcessing ()Lorg/gradle/api/provider/Property;
	public abstract fun getExtraArguments ()Lorg/gradle/api/provider/ListProperty;
	public abstract fun getInterfaceFile ()Lorg/gradle/api/file/RegularFileProperty;
	public abstract fun getOutputDir ()Lorg/gradle/api/file/DirectoryProperty;
	public abstract fun getPackageName ()Lorg/gradle/api/provider/Property;
	public abstract fun getProviderFactory ()Lorg/gradle/api/provider/ProviderFactory;
	public abstract fun getRootPath ()Lorg/gradle/api/provider/Property;
	public abstract fun getSourceDirs ()Lorg/gradle/api/provider/ListProperty;
	public abstract fun getSymbols ()Lorg/gradle/api/provider/ListProperty;
	public abstract fun getWrapFile ()Lorg/gradle/api/file/RegularFileProperty;
}

